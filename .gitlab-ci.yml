stages:
  - test
  - review
  - staging
  - production

image: zoltannz/python-with-gcloud

services:
  - docker:dind

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIPENV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pipenv"
  PIPENV_VENV_IN_PROJECT: "true"
  LANG: "en_NZ.UTF-8"
  LC_ALL: "en_NZ.UTF-8"
  FLASK_APP: "flaskr"
  FLASK_ENV: "production"
  DEBUG: "false"
  IMAGE_TAG: "${CI_COMMIT_REF_SLUG}"
  IMAGE_NAME: "gcr.io/${GC_PROJECT_ID}/flask-playground:${CI_COMMIT_REF_SLUG}"

  # Note that if you're using the Kubernetes executor, the variable should be set to
  # tcp://localhost:2375/ because of how the Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://localhost:2375

  # For non-Kubernetes executors, we use tcp://docker:2375/
  # DOCKER_HOST: tcp://docker:2375

  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2

  # The usage of docker:dind works only if TLS is disabled
  DOCKER_TLS_CERTDIR: ""

cache:
  paths:
    - .cache/pip
    - .venv/

before_script:
  - python -V # Print out python version for debugging
  - pip install pipenv
  - pipenv run setup

test:
  stage: test
  image: zoltannz/python-with-gcloud
  script:
    - pipenv run lint
    - pipenv run test
    - pipenv run cov-report

# CI_COMMIT_REF_NAME is injected by the GitLab Runner and contains the actual branch name.
# CI_COMMIT_REF_SLUG is injected by the GitLab Runner and contains the optimized version of REF_NAME.
# Expected env variables:
# - GC_SERVICE_ACCOUNT_KEY
# - GC_PROJECT_ID
# - GC_CLUSTER_NAME
# - GC_ZONE
# - APPS_DOMAIN
.auth: &auth
  image: zoltannz/python-with-gcloud
  before_script:
    - echo $GC_SERVICE_ACCOUNT_KEY > /tmp/gc-service-account-key.json
    - gcloud auth activate-service-account --key-file /tmp/gc-service-account-key.json
    - gcloud config set project ${GC_PROJECT_ID}
    - gcloud container clusters get-credentials ${GC_CLUSTER_NAME} --zone ${GC_ZONE}
    - gcloud auth configure-docker --quiet
  after_script:
    - rm /tmp/gc-service-account-key.json
    - rm -rf ~/.kube

.build_image: &build_image
  services:
    - docker:dind
  script:
    - pipenv run build
    - cat /tmp/gc-service-account-key.json | docker login -u _json_key --password-stdin https://gcr.io
    - docker build --build-arg flaskr_image_name=$IMAGE_TAG -t $IMAGE_NAME .
    - docker push $IMAGE_NAME

review_build:
  << : *auth
  << : *build_image
  stage: review
  environment:
    name: review/$CI_BUILD_REF_SLUG

review_deploy:
  << : *auth
  stage: review
  script:
    - envsubst < ./kubernetes-manifests/flaskr-review-gcp.deployment.yaml | kubectl apply -f -
  environment:
    name: review/$CI_BUILD_REF_SLUG
    url: http://$CI_BUILD_REF_SLUG.$APPS_DOMAIN
    on_stop: review_clean
  only:
    - branches
  except:
    - master

review_clean:
  << : *auth
  stage: review
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl delete deployments -n flaskr-review flaskr-review-deployment-${IMAGE_TAG}
    - kubectl delete ingresses.extensions -n flaskr-review flaskr-review-virtual-host-${IMAGE_TAG}
    - kubectl delete service -n flaskr-review flaskr-review-load-balancer-${IMAGE_TAG}
    - gcloud container images delete ${IMAGE_NAME} --force-delete-tags --quiet
  allow_failure: true
  when: manual
  environment:
    name: review/$CI_BUILD_REF_SLUG
    action: stop
  only:
    - branches
  except:
    - master

staging_build:
  << : *auth
  << : *build_image
  stage: staging
  environment:
    name: staging
  only:
    - master

staging_deploy:
  << : *auth
  stage: staging
  script:
    - envsubst < ./kubernetes-manifests/flaskr-staging-gcp.deployment.yaml | kubectl apply -f -
  environment:
    name: staging
    url: http://staging.$APPS_DOMAIN
    on_stop: staging_clean
  only:
    - master

staging_clean:
  << : *auth
  stage: staging
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl delete deployments -n flaskr-staging flaskr-staging-deployment-${IMAGE_TAG}
    - kubectl delete ingresses.extensions -n flaskr-staging flaskr-staging-virtual-host-${IMAGE_TAG}
    - kubectl delete service -n flaskr-staging flaskr-staging-load-balancer-${IMAGE_TAG}
  allow_failure: true
  when: manual
  environment:
    name: staging
    action: stop
  only:
    - master

production:
  << : *auth
  stage: production
  script:
    - envsubst < ./kubernetes-manifests/flaskr-production-gcp.deployment.yaml | kubectl apply -f -
  when: manual
  environment:
    name: production
    url: http://$APPS_DOMAIN
  only:
    - master