stages:
  - test
  - build
  - review
  - staging
  - production

image: zoltannz/python-with-gcloud

services:
  - docker:dind

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIPENV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pipenv"
  PIPENV_VENV_IN_PROJECT: "true"
  LANG: "en_NZ.UTF-8"
  LC_ALL: "en_NZ.UTF-8"
  FLASK_APP: "flaskr"
  FLASK_ENV: "production"
  DEBUG: "false"
  IMAGE_TAG: "${CI_COMMIT_REF_SLUG}"
  IMAGE_NAME: "gcr.io/${GC_PROJECT_ID}/flask-playground:${CI_COMMIT_REF_SLUG}"
  APPS_DOMAIN: "${APPS_DOMAIN}"

  # Note that if you're using the Kubernetes executor, the variable should be set to
  # tcp://localhost:2375/ because of how the Kubernetes executor connects services
  # to the job container
  # DOCKER_HOST: tcp://localhost:2375/
  #
  # For non-Kubernetes executors, we use tcp://docker:2375/
  # DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2

cache:
  paths:
    - .cache/pip
    - .cache/pipenv
    - .venv/

before_script:
  - python -V # Print out python version for debugging
  - pip install pipenv
  - pipenv run setup

test:
  stage: test
  image: zoltannz/python-with-gcloud
  script:
    - pipenv run lint
    - pipenv run test
    - pipenv run cov-report

# CI_COMMIT_REF_NAME is injected by the GitLab Runner and contains the actual branch name.
# CI_COMMIT_REF_SLUG is injected by the GitLab Runner and contains the optimized version of REF_NAME.
# Expected env variables:
# - GC_SERVICE_ACCOUNT_KEY
# - GC_PROJECT_ID
.auth: &auth
  image: zoltannz/python-with-gcloud
  before_script:
    - echo $GC_SERVICE_ACCOUNT_KEY > /tmp/gc-service-account-key.json
    - gcloud auth activate-service-account --key-file /tmp/gc-service-account-key.json
  after_script:
    - rm /tmp/gc-service-account-key.json

build:
  << : *auth
  stage: build
  services:
    - docker:dind
  script:
    - pipenv run build
    - cat /tmp/gc-service-account-key.json | docker login -u _json_key --password-stdin https://gcr.io
    - docker build -t $IMAGE_NAME .
    - docker push $IMAGE_NAME

start_review:
  << : *auth
  stage: review
  script:
    - gcloud deploy ... # TODO
  environment:
    name: review/$CI_BUILD_REF_SLUG
    url: http://$CI_BUILD_REF_SLUG.$APPS_DOMAIN.xip.io
    on_stop: stop_review
#  only:
#    - branches
#  except:
#    - master

stop_review:
  << : *auth
  stage: review
  variables:
    GIT_STRATEGY: none
  script:
    - gcloud stop $IMAGE_NAME
  when: manual
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
#  only:
#    - branches
#  except:
#    - master
